Dans cet exercice, nous allons réaliser un petit formulaire à l'aide des différents widgets découverts dans ce cours. Ce formulaire est un « StateFulWidget ». On le nommera « MonFormulairePage ». Il dispose d'un état qui va évoluer avec les interactions de l'utilisateur. Pour l'essentiel, ces widgets vont avoir comme propriété une fonction qui mettra à jour l'état de « Mon Formulaire ». Les widgets à intégrer dans notre formulaire sont des « textField », un « switch », des « checkBox », des boutons. Pour le textField, il faudra implémenter son fonctionnement de deux manières. En bas de l'écran, une zone va afficher la synthèse des informations saisies. La zone d'affichage utilisera des widgets de base que nous avons vus dans la partie 1. Il faudra combiner des widgets « Row » et « Column » pour disposer correctement les éléments.


Question
Créer un nouveau projet « mondefi ». Construire le widget « StateFulWidget » ayant pour nom « Formulaire » avec les classes de base et fonctions. Il sera dans un fichier séparé. L'appeler dans le fichier main.

	SOLUTION

On crée un fichier « monformulaire_page.dart » pour le widget « MonFormulairePage ». On crée le widget « MonFormularePage » avec les classes de base pour implémenter un « StateFulWidget ». Le widget est appelé dans le fichier « main.dart ».

Le fichier « monformulaire_page.dart » :

import 'package:flutter/material.dart';

class MonFormulairePage extends StatefulWidget {
 @override
 MonFormulairePageState createState() => MonFormulairePageState();
}

class MonFormulairePageState extends State<MonFormulairePage> {

 @override
 void initState() {
   // TODO: implement initState
   super.initState();
 }

 @override
 void dispose() {
   // TODO: implement dispose
   super.dispose();
 }

 @override
 Widget build(BuildContext context) {
   return Container();
 }
}
Le fichier « main.dart » :

import 'package:flutter/material.dart';
import 'package:monformulaire/monformulaire_page.dart';
 
void main() {
 runApp(MyApp());
}
 
class MyApp extends StatelessWidget {
 // This widget is the root of your application.
 @override
 Widget build(BuildContext context) {
   return MaterialApp(
     title: 'Flutter Demo',
     theme: ThemeData(
       primarySwatch: Colors.blue,
     ),
     home: MonFormulairePage()
   );
 }
}
Question
Créez un « scaffold » pour le squelette de votre application. À l'intérieur du body, créez une « Column ». Cette « Column » est à l'intérieur d'un widget « singleChildScrollView » pour ne pas avoir de problème d'affichage. La « Column » contient deux blocs (containers) :

Un bloc pour les champs de saisie avec une couleur de fond grise. Le bloc occupe ⅔ de l'écran.

Un bloc pour la prévisualisation. Il occupe ⅓ de l'écran. Sa couleur de fond est verte.

	SOLUTION

On intègre le scaffold dans notre widget « MonFormulairePage ». On met une « appBar », body qui contient deux containers. On récupère la taille de l'écran à partir du « context ». Le widget « Column » est à l'intérieur d'une « SingleChildScrollView ».

Le build du widget « MonFormulaire » :

@override
 Widget build(BuildContext context) {
   var size = MediaQuery.of(context).size;
   return Scaffold(
     appBar: AppBar(
       title: Text("Mon Formulaire")
     ),
     body: SingleChildScrollView(
       child: Column(
         children: [
           Container(
             height: 2*size.height/3,
             width: size.width,
             color: Colors.black12,
           ),
           Container(
             height: 1*size.height/3,
             width: size.width,
             color: Colors.green,
           )
 
         ],
       )
     )
   );
 }
}
Question
Ajoutez deux zones de texte dans le premier bloc. Ajoutez un style arrondi aux zones de texte. Mettez un texte.

	SOLUTION

On crée deux zones de saisie de texte dans le container du haut : un pour le nom et un pour le prénom. On utilise les propriétés du widget adéquat pour le style de la zone de texte.

Container(
height: 2*size.height/3 - 50,
     width: size.width,
     child: Column(
       children: [
         Padding(
           padding: const EdgeInsets.all(8.0),
           child: TextField(
             decoration: InputDecoration(
               hintText: "Entrez votre nom",
               border: OutlineInputBorder(
                 borderRadius: BorderRadius.circular(20)
               )
             ),
           ),
         ),
         Padding(
           padding: const EdgeInsets.all(8.0),
           child: TextField(
             decoration: InputDecoration(
                 hintText: "Entrez votre Prenom",
                 border: OutlineInputBorder(
                     borderRadius: BorderRadius.circular(20)
                 )
             ),
           ),
         )
       ],
     ),
     color: Colors.black12,
   )
Question
Ajoutez à la première zone de texte une méthode « onChanged » pour récupérer la chaîne de caractères saisie. Elle est ensuite affichée dans la zone du bas.

	SOLUTION

Dans notre « class » qui gère l'état, on ajoute une variable pour récupérer les caractères saisis. Ensuite, on implémente la fonction au niveau de la propriété « onChanged ». Au niveau de la zone du bas, on affiche le nom.

Le premier textField :

Padding(
 padding: const EdgeInsets.all(8.0),
 child: TextField(
   decoration: InputDecoration(
     hintText: "Entrez votre nom",
     border: OutlineInputBorder(
       borderRadius: BorderRadius.circular(20)
     )
   ),
   onChanged:(newValue){
     setState(() {
       nom = newValue;
     });
   },
 ),
),
Question
Ajoutez un « controller » pour gérer le second textField. Affichez le texte saisi dans la zone de prévisualisation.

	SOLUTION

On crée un controller. On initialise le controller dans l'initialisation de l'état (initState) et on lui ajoute une fonction « observation ». On crée la fonction « observatrice ». On ajoute une variable pour stocker le prénom.

class MonFormulairePageState extends State<MonFormulairePage> {
 
 late TextEditingController controller;
 String nom = "";
 String prenom ="";
 
 @override
 void initState() {
   // TODO: implement initState
   super.initState();
   controller = TextEditingController();
   controller.addListener(_montrerLeTexteSaisie);
 }
 
 @override
 void dispose() {
   // TODO: implement dispose
   super.dispose();
   controller.dispose();
 }

 
 void _montrerLeTexteSaisie(){
   print("monter texte saisie");
   setState(() {
     prenom = controller.text;
   });
 }
Au niveau du textField du prénom, on ajoute une propriété « controller ».

TextField(
 controller: controller,
 decoration: InputDecoration(
     hintText: "Entrez votre Prenom",
     border: OutlineInputBorder(
         borderRadius: BorderRadius.circular(20)
     )
 ),
),
Le container pour afficher le champ de texte saisi :

Container(
 height: 1*size.height/3+50,
 width: size.width,
 color: Colors.green,
 child:  Column(
   children: [
     Text("Prévisualisation"),
     Text("Nom : ${nom}"),
     Text("Prenom : ${prenom}")
 
   ],
 ),
)
Question
Ajoutez une « checkBox » pour les cours validés. Faire une fonction pour afficher les résultats cochés dans le cadre de prévisualisation.

	SOLUTION

On rajoute une variable « switchValue ». On rajoute une cellule (Row) contenant le switch.

Padding(
 padding: const EdgeInsets.all(8.0),
 child:Row(
   children: [
     Text((swichValue) ? "Homme" : "Femme"),
     Switch(value: swichValue,
         activeColor: Colors.green,
         onChanged: (bool) {
           setState(() {
             swichValue = bool;
           });
         }),
   ],
 )
Au niveau du container de prévisualisation :

Container(
  height: 1*size.height/3+50,
   width: size.width,
   color: Colors.green,
   child:  Column(
     children: [
       Text("Prévisualisation"),
       Text("Nom : ${nom}"),
       Text("Prenom : ${prenom}"),

       Text((swichValue) ? "Homme" : "Femme"),

     ],
   ),
 )
Question
Vérifiez votre code.

	SOLUTION

On crée une map pour stocker une liste de courses.

Map<String, bool> listeDeCourses = {
 "langage php":false,
 "langage flutter":true,
 "langage":false};
};
On crée une fonction qui fait une liste de checkBox.

Column checks() {
 List<Widget> items = [];
 listeDeCourses.forEach((course, acheter) {
     Widget row = Row(
       mainAxisAlignment: MainAxisAlignment.center,
       mainAxisSize:MainAxisSize.max ,
       children: [
         Text(course),
         Checkbox(value: acheter, onChanged: ((newValue){
           setState(() {
             listeDeCourses[course] = newValue ?? false;
           });

         }))
       ],
     );
     items.add(row);

 });
 return Column(children: items);
}
On crée une fonction « langageEtudie » qui retourne les langages cochés dans la prévisualisation. Elle retourne un widget de type « Column ».

Column langageEtudie(){
 List<Widget> items = [];
 listeDeCourses.forEach((cours, validate) {
   print(validate);
   if (validate == true){
     Widget row = Row(
       mainAxisAlignment:MainAxisAlignment.center ,
       children: [
         Text(cours)
       ],
     );
     items.add(row);
   }
 });
 return Column(children:items);
}
Question
Quel est le widget complet ?

	SOLUTION

Le widget entier :

import 'package:flutter/material.dart';

class MonFormulairePage extends StatefulWidget {
 @override
 MonFormulairePageState createState() => MonFormulairePageState();
}

class MonFormulairePageState extends State<MonFormulairePage> {

 Map<String, bool> listeDeCourses = {
   "Php":false,
   "Flutter":true,
   "Javascript":false};

 bool swichValue = true;

 late TextEditingController controller;
 String nom = "";
 String prenom ="";

 @override
 void initState() {
   // TODO: implement initState
   super.initState();
   controller = TextEditingController();
   controller.addListener(_montrerLeTexteSaisie);
 }

 @override
 void dispose() {
   // TODO: implement dispose
   super.dispose();
   controller.dispose();
 }


 void _montrerLeTexteSaisie(){
   print("monter texte saisie");
   setState(() {
     prenom = controller.text;
   });
 }




 @override
 Widget build(BuildContext context) {
   var size = MediaQuery.of(context).size;
   return Scaffold(
     appBar: AppBar(
       title: Text("Mon Formulaire")
     ),
     body: SingleChildScrollView(
       child: Column(
         children: [
          Container(
       height: 2*size.height/3 - 50,
             width: size.width,
             child: Column(
               children: [
                 Padding(
                   padding: const EdgeInsets.all(8.0),
                   child: TextField(
                     decoration: InputDecoration(
                       hintText: "Entrez votre nom",
                       border: OutlineInputBorder(
                         borderRadius: BorderRadius.circular(20)
                       )
                     ),
                     onChanged:(newValue){
                       setState(() {
                         nom = newValue;
                       });
                     },
                   ),
                 ),
                 Padding(
                   padding: const EdgeInsets.all(8.0),
                   child: TextField(
                     controller: controller,
                     decoration: InputDecoration(
                         hintText: "Entrez votre Prenom",
                         border: OutlineInputBorder(
                             borderRadius: BorderRadius.circular(20)
                         )
                     ),
                   ),
                 ),
                 Padding(
                   padding: const EdgeInsets.all(8.0),
                   child:Row(
                     children: [
                       Text((swichValue) ? "Homme" : "Femme"),
                       Switch(value: swichValue,
                           activeColor: Colors.green,
                           onChanged: (bool) {
                             setState(() {
                               swichValue = bool;
                             });
                           }),
                     ],
                   )
                 ),
                 Text("Cochez les Langages validés"),
                 Padding(
                   padding: const EdgeInsets.all(8.0),
                   child: checks(),
                 )

               ],
             ),
             color: Colors.black12,
           ),
         Container(
            height: 1*size.height/3+50,
             width: size.width,
             color: Colors.green,
             child:  Column(
               children: [
                 Text("Prévisualisation"),
                 Text("Nom : ${nom}"),
                 Text("Prenom : ${prenom}"),

                 Text((swichValue) ? "Homme" : "Femme"),
                 Text("Langages validés :"),
                 langageEtudie()

               ],
             ),
           )

         ],
       )
     )
   );
 }

 Column checks() {
   List<Widget> items = [];
   listeDeCourses.forEach((course, acheter) {
     Widget row = Row(
       mainAxisAlignment: MainAxisAlignment.center,
       mainAxisSize:MainAxisSize.max ,
       children: [
         Text(course),
         Checkbox(value: acheter, onChanged: ((newValue){
           setState(() {
             listeDeCourses[course] = newValue ?? false;
           });

         }))
       ],
     );
     items.add(row);

   });
   return Column(children: items);
 }

 Column langageEtudie(){
   List<Widget> items = [];
   listeDeCourses.forEach((cours, validate) {
     print(validate);
     if (validate == true){
       Widget row = Row(
         mainAxisAlignment:MainAxisAlignment.center ,
         children: [
           Text(cours)
         ],
       );
       items.add(row);
     }
   });
   return Column(children:items);
 }

}